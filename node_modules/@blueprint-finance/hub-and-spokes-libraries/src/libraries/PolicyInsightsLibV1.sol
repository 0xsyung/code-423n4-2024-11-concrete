// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.24;

import {WAD} from "../utils/Constants.sol";
import {Math} from "@openzeppelin/contracts/utils/math/Math.sol";
import {ProtectionLibV1} from "./ProtectionLibV1.sol";

library PolicyInsightsLibV1 {
    using ProtectionLibV1 for uint256;
    using Math for uint256;

    /**
     * @notice Get the lower bound for the maximum promised amount
     * @param currentCollateralAmountInTokenAtLender The current collateral amount in token at lender
     * @param totalClaimFeesAsFractionOfPromisedAmountInWad The total claim fees as fraction of promised amount in WAD. If there are three claims with fees of 0.1 ETH, 0.2 ETH and 0.3 ETH, and the promised amount is 1 ETH, then the total claim fees as fraction of promised amount is 0.6 ETH / 1 ETH = 0.6 WAD
     * @param foreclosureLtvInWad The foreclosure LTV in WAD
     * @param foreclosureExecutionDelayMultiplicativeBufferInWad The foreclosure execution delay multiplicative buffer in WAD. The foreclosure is likely not to occur exactly at the foreclosure LTV, but slightly above it. This buffer is used to account for that.
     * @return The lower bound for the maximum promised amount
     * @dev The formula for the lower bound for the maximum promised amount is: C(1 - LTV) / (1 - (1 - LTV)(1 - f))
     * where C is the current collateral amount in token at lender, LTV is the LTV at which it is foreclosed (=LTV_protect*(1+e)), and e is the foreclosure execution delay multiplicative buffer, and f is the total claim fees as fraction of promised amount
     */
    function getLowerBoundForMaxPromisedAmount(
        uint256 currentCollateralAmountInTokenAtLender,
        uint256 totalClaimFeesAsFractionOfPromisedAmountInWad,
        uint256 foreclosureLtvInWad,
        uint256 foreclosureExecutionDelayMultiplicativeBufferInWad
    ) internal pure returns (uint256) {
        uint256 ltvRemainder =
            WAD - foreclosureLtvInWad.mulDiv(WAD + foreclosureExecutionDelayMultiplicativeBufferInWad, WAD);
        return currentCollateralAmountInTokenAtLender.mulDiv(
            ltvRemainder, WAD - ltvRemainder.mulDiv(WAD - totalClaimFeesAsFractionOfPromisedAmountInWad, WAD)
        );
    }

    /// @notice Get the lower bound for the maximum promised amount (from protection info)
    /// @param lenderSuppliedInTokenWithInterest The lender supplied amount in token with interest
    /// @param protectionInfo The protection info
    /// @param liqLtvInWad The liquidation LTV in WAD
    /// @return The lower bound for the maximum promised amount
    function getLowerBoundForMaxPromisedAmountFromInfo(
        uint256 lenderSuppliedInTokenWithInterest,
        uint256 protectionInfo,
        uint256 liqLtvInWad,
        uint256 foreclosureDelayMultBufferInWad
    ) internal pure returns (uint256) {
        uint256 totalFeeFraction = 0;
        for (uint8 i = 1; i <= protectionInfo.getNumberOfTranches(); i++) {
            totalFeeFraction += protectionInfo.getTrancheFeeFractionInWad(i);
        }
        return getLowerBoundForMaxPromisedAmount(
            lenderSuppliedInTokenWithInterest,
            totalFeeFraction,
            liqLtvInWad.mulDiv(WAD - protectionInfo.getLtvProtectBufferForClaimsInWad(), WAD),
            foreclosureDelayMultBufferInWad
        );
    }
}
