// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.24;

///@title Uint8 Codec Library
///@notice This library provides functions to encode and decode uint8 values into uint256
///@author Leonhard Horstmeyer
library Uint8CodecLibV1 {
    // MODE AND ISSUER ENCODING ////////////////////////////////////////

    ///@notice Encodes the mode and issuer into a uint256
    ///@param mode The mode is a uint8 integer (0-255) that represents some properties about the mode of an action.
    ///@param issuer The issuer is a uint8 integer (0-255) that represents some properties about the issuer of an action.
    ///@return The encoded uint256 value
    ///@dev Depending on the context the mode and issuer can represent different things.
    ///@dev The least significant byte is the mode and the second least significant byte is the issuer.
    function encodeModeAndIssuer(uint8 mode, uint8 issuer) internal pure returns (uint256) {
        return uint256(mode) | (uint256(issuer) << 8);
    }

    ///@notice Encodes only the mode into a uint256
    ///@param mode The mode is a uint8 integer (0-255) that represents some properties about the mode of an action.
    ///@return The encoded uint256 value
    ///@dev Depending on the context the mode can represent different things.
    ///@dev This function should be used if the encoding only needs to encode the mode.
    function encodeOnlyMode(uint8 mode) internal pure returns (uint256) {
        return uint256(mode);
    }

    ///@notice Decodes the mode and issuer from a uint256
    ///@param data The encoded uint256 value
    ///@return mode The mode is a uint8 integer (0-255) that represents some properties about the mode of an action.
    ///@return issuer The issuer is a uint8 integer (0-255) that represents some properties about the issuer of an action.
    function decodeModeAndIssuer(uint256 data) internal pure returns (uint8 mode, uint8 issuer) {
        mode = decodeNthByte(data, 0);
        issuer = decodeNthByte(data, 1);
    }

    ///@notice Decodes the issuer from a uint256
    ///@param data The encoded uint256 value
    ///@return The issuer is a uint8 integer (0-255) that represents some properties about the issuer of an action.
    function decodeIssuer(uint256 data) internal pure returns (uint8) {
        return decodeNthByte(data, 1);
    }

    ///@notice Decodes the mode from a uint256
    ///@param data The encoded uint256 value
    ///@return The mode is a uint8 integer (0-255) that represents some properties about the mode of an action.
    function decodeMode(uint256 data) internal pure returns (uint8) {
        return decodeNthByte(data, 0);
    }

    // LOAN OPTION AND LOAN/E-MODE /////////////////////////////////////

    ///@notice Updates the loan option of a uint256 encoding
    ///@param encoding The original uint256 value
    ///@param loanOption The new loan option that should be set
    ///@return The updated uint256 value
    function updateLoanOption(uint256 encoding, uint8 loanOption) internal pure returns (uint256) {
        return updateNthByte(encoding, loanOption, 2);
    }

    ///@notice Decodes the loan option from a uint256
    ///@param data The encoded uint256 value
    ///@return The loan option is a uint8 integer (0-255) that represents some properties about the loan option of an action.
    function decodeLoanOption(uint256 data) internal pure returns (uint8) {
        return decodeNthByte(data, 2);
    }

    ///@notice Updates the loan/e-mode of a uint256 encoding
    ///@param encoding The original uint256 value
    ///@param loanEMode The new loan/e-mode that should be set
    ///@return The updated uint256 value
    function updateLoanEMode(uint256 encoding, uint8 loanEMode) internal pure returns (uint256) {
        return updateNthByte(encoding, loanEMode, 3);
    }

    ///@notice Decodes the loan/e-mode from a uint256
    ///@param data The encoded uint256 value
    ///@return The loan/e-mode is a uint8 integer (0-255) that represents some properties about the loan/e-mode of an action.
    function decodeLoanEMode(uint256 data) internal pure returns (uint8) {
        return decodeNthByte(data, 3);
    }

    // HELPER FUNCTIONS ////////////////////////////////////////////////

    ///@notice Updates the nth byte of a uint256 value
    ///@param data The original uint256 value
    ///@param n The position of the byte that should be updated
    ///@return The updated uint256 value
    function decodeNthByte(uint256 data, uint8 n) internal pure returns (uint8) {
        return uint8((data >> (8 * n)) & 0xFF);
    }

    ///@notice Updates the nth byte of a uint256 value
    ///@param encoding The original uint256 value
    ///@param newValue The new value that should be set
    ///@param position The position of the byte that should be updated
    ///@return The updated uint256 value
    function updateNthByte(uint256 encoding, uint8 newValue, uint8 position) internal pure returns (uint256) {
        uint256 shift = uint256(position) * 8;
        // Create a mask with the relevant bits set to 0
        uint256 mask = ((uint256(type(uint8).max)) << shift);
        // Clear the relevant bits in the originalValue and set them to the new value
        return (encoding & ~mask) | ((uint256(newValue) << shift) & mask);
    }
}
