// SPDX-License-Identifier: AGPL-3.0
pragma solidity 0.8.24;

library AaveDataTypes {
    struct ReserveData {
        //stores the reserve configuration
        uint256 data;
        // ReserveConfigurationMap configuration;
        //the liquidity index. Expressed in ray
        uint128 liquidityIndex;
        //the current supply rate. Expressed in ray
        uint128 currentLiquidityRate;
        //variable borrow index. Expressed in ray
        uint128 variableBorrowIndex;
        //the current variable borrow rate. Expressed in ray
        uint128 currentVariableBorrowRate;
        //the current stable borrow rate. Expressed in ray
        uint128 currentStableBorrowRate;
        //timestamp of last update
        uint40 lastUpdateTimestamp;
        //the id of the reserve. Represents the position in the list of the active reserves
        uint16 id;
        //aToken address
        address aTokenAddress;
        //stableDebtToken address
        address stableDebtTokenAddress;
        //variableDebtToken address
        address variableDebtTokenAddress;
        //address of the interest rate strategy
        address interestRateStrategyAddress;
        //the current treasury balance, scaled
        uint128 accruedToTreasury;
        //the outstanding unbacked aTokens minted through the bridging feature
        uint128 unbacked;
        //the outstanding debt borrowed against this asset in isolation mode
        uint128 isolationModeTotalDebt;
    }
}

library AaveV3Helper {
    // Custom errors for more specific revert reasons
    error AaveSupplyFailed(address asset, uint256 amount, address onBehalfOf, uint16 referralCode);
    error AaveWithdrawFailed(address asset, uint256 amount, address to);
    error AaveBorrowFailed(
        address asset, uint256 amount, address onBehalfOf, uint256 interestRateMode, uint16 referralCode
    );
    error AaveRepayFailed(address asset, uint256 amount, address onBehalfOf, uint256 interestRateMode);
    error AaveClaimRewardsFailed(address rewardsController, address[] assets, address to);
    error GetAddressesProviderFailed(address aaveDataProvider);
    error GetPriceOracleFailed(address addressesProvider);
    error GetBaseCurrencyUnitFailed(address priceOracle);
    error GetAssetPriceFailed(address priceOracle, address asset);
    error GetReserveTokensAddressesFailed(address aaveDataProvider, address asset);
    error GetUserAccountDataFailed(address pool, address user);
    error GetPoolFailed(address aToken);
    error FlashLoanSimpleFailed(address receiverAddress, address asset, uint256 amount, uint16 referralCode);
    error GetReserveDataFailed(address pool, address asset);

    // Fetch ADDRESSES_PROVIDER from AAVE_DATA_PROVIDER
    function ADDRESSES_PROVIDER(address aaveDataProvider) public view returns (address) {
        bytes memory data = abi.encodeWithSignature("ADDRESSES_PROVIDER()");
        (bool success, bytes memory result) = aaveDataProvider.staticcall(data);
        if (!success) revert GetAddressesProviderFailed(aaveDataProvider);
        return abi.decode(result, (address));
    }

    function UNDERLYING_ASSET_ADDRESS(address aToken) public view returns (address) {
        (bool success, bytes memory result) = aToken.staticcall(abi.encodeWithSignature("UNDERLYING_ASSET_ADDRESS()"));
        if (!success) revert GetPoolFailed(aToken);
        return abi.decode(result, (address));
    }

    // Get POOL address from an aToken
    function POOL(address aToken) public view returns (address) {
        (bool success, bytes memory result) = aToken.staticcall(abi.encodeWithSignature("POOL()"));
        if (!success) revert GetPoolFailed(aToken);
        return abi.decode(result, (address));
    }

    function getIncentivesController(address aToken) public view returns (address) {
        (bool success, bytes memory result) = aToken.staticcall(abi.encodeWithSignature("getIncentivesController()"));
        if (!success) revert GetPoolFailed(aToken);
        return abi.decode(result, (address));
    }

    function getPool(address addressProvider) public view returns (address) {
        (bool success, bytes memory result) = addressProvider.staticcall(abi.encodeWithSignature("getPool()"));
        if (!success) revert GetPoolFailed(addressProvider);
        return abi.decode(result, (address));
    }

    // Fetch Price Oracle from ADDRESSES_PROVIDER
    function getPriceOracle(address addressesProvider) public view returns (address) {
        bytes memory data = abi.encodeWithSignature("getPriceOracle()");
        (bool success, bytes memory result) = addressesProvider.staticcall(data);
        if (!success) revert GetPriceOracleFailed(addressesProvider);
        return abi.decode(result, (address));
    }

    // Fetch the BASE_CURRENCY_UNIT from Price Oracle
    function BASE_CURRENCY_UNIT(address priceOracle) public view returns (uint256) {
        bytes memory data = abi.encodeWithSignature("BASE_CURRENCY_UNIT()");
        (bool success, bytes memory result) = priceOracle.staticcall(data);
        if (!success) revert GetBaseCurrencyUnitFailed(priceOracle);
        return abi.decode(result, (uint256));
    }

    // Fetch asset price from Price Oracle
    function getAssetPrice(address priceOracle, address asset) public view returns (uint256) {
        bytes memory data = abi.encodeWithSignature("getAssetPrice(address)", asset);
        (bool success, bytes memory result) = priceOracle.staticcall(data);
        if (!success) revert GetAssetPriceFailed(priceOracle, asset);
        return abi.decode(result, (uint256));
    }

    // Get Reserve Tokens Addresses from AAVE_DATA_PROVIDER
    function getReserveTokensAddresses(address aaveDataProvider, address asset)
        public
        view
        returns (address, address, address)
    {
        bytes memory data = abi.encodeWithSignature("getReserveTokensAddresses(address)", asset);
        (bool success, bytes memory result) = aaveDataProvider.staticcall(data);
        if (!success) revert GetReserveTokensAddressesFailed(aaveDataProvider, asset);
        return abi.decode(result, (address, address, address));
    }

    // Get User Account Data from Pool
    function getUserAccountData(address pool, address user)
        public
        view
        returns (uint256, uint256, uint256, uint256, uint256, uint256)
    {
        bytes memory data = abi.encodeWithSignature("getUserAccountData(address)", user);
        (bool success, bytes memory result) = pool.staticcall(data);
        if (!success) revert GetUserAccountDataFailed(pool, user);
        return abi.decode(result, (uint256, uint256, uint256, uint256, uint256, uint256));
    }

    //   function getReserveData(address asset) external view returns (AaveDataTypes.ReserveData memory);

    function getReserveData(address pool, address asset) public view returns (AaveDataTypes.ReserveData memory) {
        bytes memory data = abi.encodeWithSignature("getReserveData(address)", asset);
        (bool success, bytes memory result) = pool.staticcall(data);
        if (!success) revert GetReserveDataFailed(pool, asset);
        return abi.decode(result, (AaveDataTypes.ReserveData));
    }

    // Supply asset to Aave
    function supply(address pool, address asset, uint256 amount, address onBehalfOf, uint16 referralCode)
        public
        returns (bool)
    {
        bytes memory data =
            abi.encodeWithSignature("supply(address,uint256,address,uint16)", asset, amount, onBehalfOf, referralCode);

        (bool success,) = pool.call(data);
        if (!success) revert AaveSupplyFailed(asset, amount, onBehalfOf, referralCode);
        return success;
    }

    // Withdraw asset from Aave
    function withdraw(address pool, address asset, uint256 amount, address to) public returns (bool) {
        bytes memory data = abi.encodeWithSignature("withdraw(address,uint256,address)", asset, amount, to);

        (bool success,) = pool.call(data);
        if (!success) revert AaveWithdrawFailed(asset, amount, to);
        return success;
    }

    // Borrow asset from Aave
    function borrow(
        address pool,
        address asset,
        uint256 amount,
        uint256 interestRateMode,
        uint16 referralCode,
        address onBehalfOf
    ) public returns (bool) {
        bytes memory data = abi.encodeWithSignature(
            "borrow(address,uint256,uint256,uint16,address)", asset, amount, interestRateMode, referralCode, onBehalfOf
        );

        (bool success,) = pool.call(data);
        if (!success) revert AaveBorrowFailed(asset, amount, onBehalfOf, interestRateMode, referralCode);
        return success;
    }

    // Repay borrowed asset to Aave
    function repay(address pool, address asset, uint256 amount, uint256 interestRateMode, address onBehalfOf)
        public
        returns (bool)
    {
        bytes memory data = abi.encodeWithSignature(
            "repay(address,uint256,uint256,address)", asset, amount, interestRateMode, onBehalfOf
        );

        (bool success,) = pool.call(data);
        if (!success) revert AaveRepayFailed(asset, amount, onBehalfOf, interestRateMode);
        return success;
    }

    // Claim rewards from Aave's reward controller
    function claimAllRewards(address rewardsController, address[] memory assets, address to) public returns (bool) {
        bytes memory data = abi.encodeWithSignature("claimAllRewards(address[],address)", assets, to);

        (bool success,) = rewardsController.call(data);
        if (!success) revert AaveClaimRewardsFailed(rewardsController, assets, to);
        return success;
    }

    function getUserRewards(address rewardController, address[] calldata assets, address user, address rewardToken)
        public
        view
        returns (uint256)
    {
        bytes memory data =
            abi.encodeWithSignature("getUserRewards(address[],address, address)", assets, user, rewardToken);

        (bool success, bytes memory result) = rewardController.staticcall(data);
        if (!success) revert AaveClaimRewardsFailed(rewardController, assets, user);
        return abi.decode(result, (uint256));
    }

    function getAllUserRewards(address rewardController, address[] memory assets, address user)
        public
        view
        returns (address[] memory, uint256[] memory)
    {
        bytes memory data = abi.encodeWithSignature("getAllUserRewards(address[],address)", assets, user);

        (bool success, bytes memory result) = rewardController.staticcall(data);
        if (!success) revert AaveClaimRewardsFailed(rewardController, assets, user);
        return abi.decode(result, (address[], uint256[]));
    }

    // Execute a flash loan
    function flashLoanSimple(
        address pool, // The address of the pool contract
        address receiverAddress, // The address of the contract receiving the flash loan
        address asset, // The asset being borrowed
        uint256 amount, // The amount of the asset being borrowed
        bytes calldata params, // Additional data passed along for the flash loan
        uint16 referralCode // The referral code
    ) external returns (bool) {
        bytes memory data = abi.encodeWithSignature(
            "flashLoanSimple(address,address,uint256,bytes,uint16)",
            receiverAddress,
            asset,
            amount,
            params,
            referralCode
        );

        (bool success,) = pool.call(data);
        if (!success) revert FlashLoanSimpleFailed(receiverAddress, asset, amount, referralCode);
        return success;
    }
}
