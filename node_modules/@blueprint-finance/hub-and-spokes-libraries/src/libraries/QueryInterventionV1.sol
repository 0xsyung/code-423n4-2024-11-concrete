// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.24;

import {WAD} from "../utils/Constants.sol";
import {Errors} from "./Errors.sol";
import {Math} from "@openzeppelin/contracts/utils/math/Math.sol";
import {ProtectionLibV1} from "./ProtectionLibV1.sol";

///@title Query Intervention Library V1
///@notice This library provides functions to query the possibility of a protocol or user intervention
///@author Leonhard Horstmeyer
library QueryInterventionV1 {
    using ProtectionLibV1 for uint256;
    using Math for uint256;

    ///@notice Checks if a protection can be cancelled through Concrete Lite, just using the protection Info.
    ///@param protectionInfo The protection info of the protected loan (see encoding in the ProtectionLibV1)
    ///@param concreteLiteInfo The concrete lite info of the loan (see encoding in the ProtectionLibV1)
    ///@param currentLtvInWad The current LTV of the protected loan
    ///@param liquidationLtvInWad The liquidation LTV of the protected loan
    ///@return foreclosable True if the protection can be cancelled, false otherwise
    function isLiteForeclosableFromInfo(
        uint256 protectionInfo,
        uint256 concreteLiteInfo,
        uint256 currentLtvInWad,
        uint256 liquidationLtvInWad
    ) internal pure returns (bool foreclosable) {
        if (protectionInfo != 0) return false;
        if (!concreteLiteInfo.getConcreteLiteEnabled()) return false;
        uint256 foreclosureThresholdInWad = liquidationLtvInWad
            - concreteLiteInfo.getLtvProtectBufferForForeclosureInWad().mulDiv(liquidationLtvInWad, WAD);
        return isLiteForeclosable(currentLtvInWad, foreclosureThresholdInWad) == 1;
    }

    ///@notice Checks if a loan can be foreclosed before expiration due to the current LTV being above the foreclosure threshold and the entire credit being used up.
    ///@param protectionInfo The protection info of the protected loan (see encoding in the ProtectionLibV1)
    ///@param currentLtvInWad The current LTV of the protected loan
    ///@param liquidationLtvInWad The liquidation LTV of the protected loan
    ///@return foreclosable True if the loan can be foreclosed, false otherwise
    function isForeclosableByClaims(uint256 protectionInfo, uint256 currentLtvInWad, uint256 liquidationLtvInWad)
        internal
        view
        returns (bool foreclosable)
    {
        if (protectionInfo == 0) return false;
        return _isForeclosableType2(
            protectionInfo.getEndTime() < block.timestamp,
            protectionInfo.getNumberOfClaims(),
            protectionInfo.getNumberOfTranches(),
            liquidationLtvInWad
                - protectionInfo.getLtvProtectBufferForForeclosureInWad().mulDiv(liquidationLtvInWad, WAD),
            currentLtvInWad
        );
    }

    ///@notice Checks if a loan can claim a credit injection to be protected against a possible lender-liquidation.
    ///@param protectionInfo The protection info of the (possibly)protected loan (see encoding in the ProtectionLibV1)
    ///@param currentLtvInWad The current LTV of the (possibly) protected loan
    ///@return True if the loan can claim protection, false otherwise
    function canClaimProtection(uint256 protectionInfo, uint256 currentLtvInWad, uint256 liqLtvInWad)
        internal
        view
        returns (bool)
    {
        if (protectionInfo == 0) return false;
        return isClaimable(
            protectionInfo.getEndTime() >= block.timestamp,
            protectionInfo.getNumberOfClaims(),
            protectionInfo.getNumberOfTranches(),
            currentLtvInWad,
            liqLtvInWad - protectionInfo.getLtvProtectBufferForClaimsInWad().mulDiv(liqLtvInWad, WAD)
        );
    }

    ///@notice Checks if a loan can claim a credit injection to be protected against a possible lender-liquidation. Uses a different set of parameters than canClaimProtection.
    ///@param isProtected True if the loan is protected, false otherwise
    ///@param numberOfClaimsUsed The number of claims used by the loan
    ///@param availableClaims The number of claims available to the loan
    ///@param currentLtvInWad The current LTV of the protected loan
    ///@param foreclosureThresholdInWad The foreclosure threshold of the protected loan
    ///@return True if the loan can claim protection, false otherwise
    function isClaimable(
        bool isProtected,
        uint8 numberOfClaimsUsed,
        uint8 availableClaims,
        uint256 currentLtvInWad,
        uint256 foreclosureThresholdInWad
    ) internal pure returns (bool) {
        return _isClaimablePrimitive(
            isProtected,
            numberOfClaimsUsed >= availableClaims, // not used up all claims
            currentLtvInWad >= foreclosureThresholdInWad
        ); //
    }

    ///@notice Checks if a loan has reclaimable debt after maturation of the protection policy.
    ///@param expired True if the protection policy has expired, false otherwise
    ///@param collateralValueInBase The value of the collateral in base units (usd)
    ///@param concreteCreditDebtValueInBase The value of the concrete credit debt in base units (usd)
    ///@param lenderDebtValueInBase The value of the lender debt in base units (usd)
    ///@param lenderMaxLTV The maximum LTV the lender allows
    ///@return True if the loan has reclaimable debt, false otherwise
    function isReclaimable(
        bool expired,
        uint256 collateralValueInBase,
        uint256 concreteCreditDebtValueInBase,
        uint256 lenderDebtValueInBase,
        uint256 lenderMaxLTV
    ) internal pure returns (bool) {
        uint256 ltvAfterReclaim = lenderDebtValueInBase.mulDiv(
            WAD, _reclaimableCollateral(collateralValueInBase, concreteCreditDebtValueInBase)
        );

        return _isForeclosableType3Primitive(expired, ltvAfterReclaim <= lenderMaxLTV);
    }

    ///@notice Checks if a loan is foreclosable in any way due to the policy agreement.
    ///@param numberOfClaimsUsed The number of claims used by the loan
    ///@param availableClaims The number of claims available to the loan
    ///@param expired True if the protection policy has expired, false otherwise
    ///@param collateralValueInBase The value of the collateral in base units (usd)
    ///@param concreteCreditDebtValueInBase The value of the concrete credit debt in base units (usd)
    ///@param lenderDebtValueInBase The value of the lender debt in base units (usd)
    ///@param foreclosureFeeInBase The value of the foreclosure fee in base units (usd)
    ///@param flashloanPremiumInBase The value of the flashloan premium in base units (usd)
    ///@param foreclosureThresholdInWad The foreclosure threshold in WAD
    ///@param currentLtvInWad The current LTV of the protected loan
    ///@param lenderMaxLtvInWad The maximum LTV the lender allows
    ///@param multiplicativeThresholdBufferInWad The multiplicative threshold buffer in WAD
    ///@return foreclosureType The type of foreclosure that can be applied to the loan
    ///@dev The types are: 0 = no foreclosure, 1 = lite foreclosure, 2 = foreclosure by claims, 3 = foreclosure by reclaim, 4 = foreclosure by fee
    function isProtectionForclosable(
        uint8 numberOfClaimsUsed,
        uint8 availableClaims,
        bool expired,
        uint256 collateralValueInBase,
        uint256 concreteCreditDebtValueInBase,
        uint256 lenderDebtValueInBase,
        uint256 foreclosureFeeInBase,
        uint256 flashloanPremiumInBase,
        uint256 foreclosureThresholdInWad,
        uint256 currentLtvInWad,
        uint256 lenderMaxLtvInWad,
        uint256 multiplicativeThresholdBufferInWad
    ) internal pure returns (uint8 foreclosureType) {
        bool foreclosable = _isForeclosableType2(
            expired, numberOfClaimsUsed, availableClaims, foreclosureThresholdInWad, currentLtvInWad
        );
        if (foreclosable) return 2;

        foreclosable = _isForeclosableType3(
            expired, collateralValueInBase, concreteCreditDebtValueInBase, lenderDebtValueInBase, lenderMaxLtvInWad
        );
        if (foreclosable) return 3;

        foreclosable = _isForeclosableType4(
            expired,
            collateralValueInBase,
            concreteCreditDebtValueInBase,
            lenderDebtValueInBase,
            foreclosureFeeInBase,
            flashloanPremiumInBase,
            multiplicativeThresholdBufferInWad
        );
        if (foreclosable) return 4;

        return 0;
    }

    ///@notice Checks if a protection can be foreclosed through Concrete Lite, just using the LTVs.
    ///@param currentLtvInWad The current LTV of the protected loan
    ///@param liteForeclosureThresholdInWad The foreclosure threshold in WAD
    ///@return 1 if the protection can be foreclosed, 0 otherwise
    function isLiteForeclosable(uint256 currentLtvInWad, uint256 liteForeclosureThresholdInWad)
        internal
        pure
        returns (uint8)
    {
        return _isForeclosableType1Primitive(currentLtvInWad, liteForeclosureThresholdInWad) ? 1 : 0;
    }

    // internal pure FUNCTIONS FOR FORECLOSING //////////////////////////////////////

    ///@notice Checks if a loan can be foreclosed due to the current LTV being above the foreclosure threshold and the entire credit being used up.
    ///@param expired True if the protection policy has expired, false otherwise
    ///@param numberOfClaimsUsed The number of claims used by the loan
    ///@param availableClaims The number of claims available to the loan
    ///@param foreclosureThresholdInWad The foreclosure threshold in WAD
    ///@param currentLtvInWad The current LTV of the protected loan
    ///@return True if the loan can be foreclosed, false otherwise
    function _isForeclosableType2(
        bool expired,
        uint8 numberOfClaimsUsed,
        uint8 availableClaims,
        uint256 foreclosureThresholdInWad,
        uint256 currentLtvInWad
    ) internal pure returns (bool) {
        return _isForeclosableType2Primitive(
            expired, // expired ?
            numberOfClaimsUsed >= availableClaims, // used up all claims?
            foreclosureThresholdInWad, // threshold
            currentLtvInWad
        ); // current ltv
    }

    ///@notice Checks if a loan can be foreclosed due to the protection policy reaching maturity and the concrete debt cannot be reclaimed directly from the loan's collateral.
    ///@param expired True if the protection policy has expired, false otherwise
    ///@param collateralValueInBase The value of the collateral in base units (usd)
    ///@param concreteCreditDebtValueInBase The value of the concrete credit debt in base units (usd)
    ///@param lenderDebtValueInBase The value of the lender debt in base units (usd)
    ///@param lenderMaxLTV The maximum LTV the lender allows
    ///@return True if the loan can be foreclosed, false otherwise
    function _isForeclosableType3(
        bool expired,
        uint256 collateralValueInBase,
        uint256 concreteCreditDebtValueInBase,
        uint256 lenderDebtValueInBase,
        uint256 lenderMaxLTV
    ) internal pure returns (bool) {
        uint256 ltvAfterReclaim = lenderDebtValueInBase.mulDiv(
            WAD, _reclaimableCollateral(collateralValueInBase, concreteCreditDebtValueInBase)
        );

        return _isForeclosableType3Primitive(expired, ltvAfterReclaim > lenderMaxLTV);
    }

    ///@notice Checks if a loan can be foreclosed because the position doesnt hold enough collateral to cover the debt, even pre-maturity.
    ///@param expired True if the protection policy has expired, false otherwise
    ///@param collateralValueInBase The value of the collateral in base units (usd)
    ///@param concreteCreditDebtValueInBase The value of the concrete credit debt in base units (usd)
    ///@param lenderDebtValueInBase The value of the lender debt in base units (usd)
    ///@param foreclosureFeeInBase The value of the foreclosure fee in base units (usd)
    ///@param flashloanPremiumInBase The value of the flashloan premium in base units (usd)
    ///@param multiplicativeThresholdBufferInWad The multiplicative threshold buffer in WAD
    ///@return True if the loan can be foreclosed, false otherwise
    function _isForeclosableType4(
        bool expired,
        uint256 collateralValueInBase,
        uint256 concreteCreditDebtValueInBase,
        uint256 lenderDebtValueInBase,
        uint256 foreclosureFeeInBase,
        uint256 flashloanPremiumInBase,
        uint256 multiplicativeThresholdBufferInWad
    ) internal pure returns (bool) {
        uint256 ltvAfterReclaim = lenderDebtValueInBase.mulDiv(
            WAD,
            _reclaimableCollateral(
                collateralValueInBase, concreteCreditDebtValueInBase + foreclosureFeeInBase + flashloanPremiumInBase
            )
        );

        return _isForeclosableType4Primitive(expired, ltvAfterReclaim > WAD - multiplicativeThresholdBufferInWad);
    }

    // PRIMITIVE HELPER FUNCTIONS /////////////////////////////////////////////

    ///@notice Primitive that checks if a loan can be foreclosed due to the current LTV being above the foreclosure threshold.
    ///@param currentLtvInWad The current LTV of the protected loan
    ///@param thrInWad The foreclosure threshold in WAD
    ///@return True if the loan can be foreclosed, false otherwise
    ///@dev This private function works as a primitive for more complex functions
    function _isForeclosableType1Primitive(uint256 currentLtvInWad, uint256 thrInWad) private pure returns (bool) {
        return currentLtvInWad >= thrInWad;
    }

    ///@notice Primitive that checks if a loan can be foreclosed due to the current LTV being above the foreclosure threshold and the entire credit being used up.
    ///@param expired True if the protection policy has expired, false otherwise
    ///@param claimsUsed True if the entire credit has been used up, false otherwise
    ///@param thrInWad The foreclosure threshold in WAD
    ///@param currentLtvInWad The current LTV of the protected loan
    ///@return True if the loan can be foreclosed, false otherwise
    ///@dev This private function works as a primitive for more complex functions
    function _isForeclosableType2Primitive(bool expired, bool claimsUsed, uint256 thrInWad, uint256 currentLtvInWad)
        private
        pure
        returns (bool)
    {
        return !expired && claimsUsed && currentLtvInWad >= thrInWad;
    }

    ///@notice Primitive that checks if a loan can be foreclosed due to the protection policy reaching maturity and the concrete debt cannot be reclaimed directly from the loan's collateral.
    ///@param expired True if the protection policy has expired, false otherwise
    ///@param debtCannotBeWithdrawn True if the concrete debt cannot be reclaimed, false otherwise
    ///@return True if the loan can be foreclosed, false otherwise
    ///@dev This private function works as a primitive for more complex functions
    function _isForeclosableType3Primitive(bool expired, bool debtCannotBeWithdrawn) private pure returns (bool) {
        return expired && debtCannotBeWithdrawn;
    }

    ///@notice Primitive that checks if a loan can be foreclosed because the position doesnt hold enough collateral to cover the debt, even pre-maturity.
    ///@param expired True if the protection policy has expired, false otherwise
    ///@param debtAboveReclaimableLimit True if the debt is above the reclaimable limit, false otherwise
    ///@return True if the loan can be foreclosed, false otherwise
    ///@dev This private function works as a primitive for more complex functions
    function _isForeclosableType4Primitive(bool expired, bool debtAboveReclaimableLimit) private pure returns (bool) {
        return !expired && debtAboveReclaimableLimit;
    }

    ///@notice Primitive that checks if a protection can be cancelled.
    ///@param expired True if the protection policy has expired, false otherwise
    ///@param hasOutstandingDebt True if the loan has outstanding debt, false otherwise
    ///@return True if the protection can be cancelled, false otherwise
    ///@dev This private function works as a primitive for more complex functions
    function _protectionCanBeCancelledPrimitive(bool expired, bool hasOutstandingDebt) private pure returns (bool) {
        return expired && !hasOutstandingDebt;
    }

    ///@notice Primitive that checks if a loan can claim a credit injection to be protected against a possible lender-liquidation.
    ///@param isProtected True if the loan is protected, false otherwise
    ///@param hasUsedUpAllClaims True if the loan has used up all claims, false otherwise
    ///@param crossLtvProtect True if the current LTV is above the foreclosure threshold, false otherwise
    ///@return True if the loan can claim protection, false otherwise
    ///@dev This private function works as a primitive for more complex functions
    function _isClaimablePrimitive(bool isProtected, bool hasUsedUpAllClaims, bool crossLtvProtect)
        private
        pure
        returns (bool)
    {
        return isProtected && !hasUsedUpAllClaims && crossLtvProtect;
    }

    ///@notice This primitive checks what the reclaimable collateral is and reverts if the collateral is below the debt value.
    ///@param collateralValueInBase The value of the collateral in base units (usd)
    ///@param concreteCreditDebtValueInBase The value of the concrete credit debt in base units (usd)
    ///@return reclaimable The reclaimable collateral
    ///@dev This private function works as a primitive for more complex functions
    function _reclaimableCollateral(uint256 collateralValueInBase, uint256 concreteCreditDebtValueInBase)
        private
        pure
        returns (uint256 reclaimable)
    {
        if (collateralValueInBase >= concreteCreditDebtValueInBase) {
            return collateralValueInBase - concreteCreditDebtValueInBase;
        }
        revert Errors.CollateralValueBelowDebtValue();
    }
}
