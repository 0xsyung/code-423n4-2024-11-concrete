// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.24;

import {Math} from "@openzeppelin/contracts/utils/math/Math.sol";

library OracleLibV1 {
    using Math for uint256;

    // CONVERT DENOMINATION TO DECIMALS

    function getDecimalsFromDenomination(uint256 denomination) internal pure returns (uint8) {
        uint8 decimals = 0;
        while (denomination >= 10) {
            denomination /= 10;
            decimals++;
        }
        return decimals;
    }

    ///@notice Converts a price quote from standard units to smallest units
    ///@param priceStandardUnits The price in standard units. E.g. For WETH to USDC with a precision of precisionStandardUnits.
    ///@param denominationA The denomination of the first token (of which we would quoted the price)
    ///@param denominationB The denomination of the second token (in terms of we would quoted the price)
    ///@param precisionStandardUnits The precision of the standard units price quote.
    ///@param precisionSmallestUnits The precision of the smallest units price quote.
    ///@return priceSmallestUnits The price quote for the smallest units, with precision of precisionSmallestUnits.
    ///@dev For example we have A=WETH and B=USDC. So we would like to quote the price of one unit of WETH in terms of USDC units.
    ///@dev In terms of standard units the price of 1 WETH might be 1234.56 USDC, say. So the priceStandardUnits = 1234560000 (1234.56 * 10^6) using a precisionStandardUnits of 10^6.
    ///@dev In terms of smallest units, which would be Wei and microUSDC for WETH and USDC (i.e. 1 WETH = 10^18 Wei and 1 USDC = 10^6 microUSDC), the price of 1 Wei would be 0.00000000123456 microUSDC.
    ///@dev So if we are using a precisionSmallestUnits of 10^26, then priceSmallestUnits = 123456000000000000 ( = 0.00000000123456 * 10^26). But of course any precision may be quoted here.
    function convertStandardUnitsToSmallestUnitsPriceQuote(
        uint256 priceStandardUnits,
        uint256 denominationA,
        uint256 denominationB,
        uint256 precisionStandardUnits,
        uint256 precisionSmallestUnits
    ) internal pure returns (uint256 priceSmallestUnits) {
        priceSmallestUnits =
            priceStandardUnits.mulDiv(denominationB * precisionSmallestUnits, denominationA * precisionStandardUnits);
    }

    ///@notice Converts a price quote from smallest units to standard units
    ///@param priceSmallestUnits The price in smallest units, with precision of precisionSmallestUnits.
    ///@param denominationA The denomination of the first token (of which we would quoted the price)
    ///@param denominationB The denomination of the second token (in terms of we would quoted the price)
    ///@param precisionStandardUnits The precision of the standard units price quote.
    ///@param precisionSmallestUnits The precision of the smallest units price quote.
    ///@return priceStandardUnits The price quote for the standard units, with precision of precisionStandardUnits.
    ///@dev For example we have A=WETH and B=USDC. So we would like to quote the price of one unit of WETH in terms of USDC units.
    ///@dev Consider the scenario as in the conversion of standard units to smallest units, where the price of 1 WETH might be 1234.56 USDC, say.
    ///@dev In terms of smallest units, which would be Wei and microUSDC for WETH and USDC (i.e. 1 WETH = 10^18 Wei and 1 USDC = 10^6 microUSDC), the price of 1 Wei would be 0.00000000123456 microUSDC.
    ///@dev So if we are using a precisionSmallestUnits of 10^26 and precisionStandardUnits of 10^6, then priceStandardUnits = 1234560000 (1234.56 * 10^6).
    function convertSmallestUnitsToStandardUnitsPriceQuote(
        uint256 priceSmallestUnits,
        uint256 denominationA,
        uint256 denominationB,
        uint256 precisionStandardUnits,
        uint256 precisionSmallestUnits
    ) internal pure returns (uint256 priceStandardUnits) {
        priceStandardUnits =
            priceSmallestUnits.mulDiv(precisionStandardUnits * denominationA, precisionSmallestUnits * denominationB);
    }

    ///@notice Converts a price quote from one denomination to another
    ///@param price The price in the old denomination
    ///@param oldDenomination The old denomination of the price
    ///@param newDenomination The new denomination of the price
    ///@return priceNewDenomination The price in the new denomination
    ///@dev For example, say we quote the price of WETH in terms of USDC at an accuracy of 10^8. So if 1 WETH trades at 1234.56 USDC then this would result in a quote of 123456000000.
    ///@dev Now, converting to another denomination (i.e. accuracy) of 10^18, we would get a quote of 1234560000000000000000.
    function changeDenominationOfPrice(uint256 price, uint256 oldDenomination, uint256 newDenomination)
        internal
        pure
        returns (uint256)
    {
        return price.mulDiv(newDenomination, oldDenomination);
    }
}
