// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.24;

/**
 * @title Floating-Point Encoding and Decoding
 * @author Leonhard Horstmeyer
 * @dev Provides functions to encode and decode numbers into a custom floating-point format with a uint8, uint16 and uint32 significand.
 */
library CompactEncodeLib {
    // ENCODING FUNCTIONS /////////////////////////////////////////////

    /**
     * @notice Encodes a uint256 number into a custom floating-point representation with a uint8 significand.
     * @dev Encodes `number` into a smaller representation by reducing its size to fit within a uint8 significand while calculating the exponent based on the number of right shifts needed.
     * @param number The uint256 number to be encoded.
     * @return significand The uint8 significand part of the encoded number.
     * @return exponent The uint8 exponent part of the encoded number, representing the number of times `number` was halved to fit into the significand.
     */
    function encode_uint8(uint256 number) public pure returns (uint8 significand, uint8 exponent) {
        while (number > 0xFF) {
            // 0xFF is the maximum value a uint8 can hold
            number >>= 1; // Equivalent to dividing by 2
            exponent++;
        }
        significand = uint8(number);
    }

    /**
     * @notice Encodes a uint256 number into a custom floating-point representation with a uint16 significand.
     * @dev Encodes `number` into a smaller representation by reducing its size to fit within a uint16 significand while calculating the exponent based on the number of right shifts needed.
     * @param number The uint256 number to be encoded.
     * @return significand The uint16 significand part of the encoded number.
     * @return exponent The uint8 exponent part of the encoded number, representing the number of times `number` was halved to fit into the significand.
     */
    function encode_uint16(uint256 number) public pure returns (uint16 significand, uint8 exponent) {
        while (number > 0xFFFF) {
            // 0xFFFF is the maximum value a uint16 can hold
            number >>= 1; // Equivalent to dividing by 2
            exponent++;
        }
        significand = uint16(number);
    }

    /**
     * @notice Encodes a uint256 number into a custom floating-point representation with a uint32 significand.
     * @dev Encodes `number` into a smaller representation by reducing its size to fit within a uint32 significand while calculating the exponent based on the number of right shifts needed.
     * @param number The uint256 number to be encoded.
     * @return significand The uint32 significand part of the encoded number.
     * @return exponent The uint8 exponent part of the encoded number, representing the number of times `number` was halved to fit into the significand.
     */
    function encode_uint32(uint256 number) public pure returns (uint32 significand, uint8 exponent) {
        while (number > 0xFFFFFFFF) {
            // 0xFFFFFFFF is the maximum value a uint32 can hold
            number >>= 1; // Equivalent to dividing by 2
            exponent++;
        }
        significand = uint32(number);
    }

    /**
     * @notice Encodes a uint256 number into a custom floating-point representation with a uint64 significand.
     * @dev Encodes `number` into a smaller representation by reducing its size to fit within a uint64 significand while calculating the exponent based on the number of right shifts needed.
     * @param number The uint256 number to be encoded.
     * @return significand The uint64 significand part of the encoded number.
     * @return exponent The uint8 exponent part of the encoded number, representing the number of times `number` was halved to fit into the significand.
     */
    function encode_uint64(uint256 number) public pure returns (uint64 significand, uint8 exponent) {
        while (number > 0xFFFFFFFFFFFFFFFF) {
            // 0xFFFFFFFFFFFFFFFF is the max a uint64 can hold
            number >>= 1; // Equivalent to dividing by 2
            exponent++;
        }
        significand = uint64(number);
    }

    // DECODING FUNCTIONS /////////////////////////////////////////////

    /**
     * @notice Decodes a custom floating-point representation with a uint8 significand back into a uint256 number.
     * @dev Decodes the encoded number by shifting the significand left by the exponent, effectively multiplying it back.
     * @param significand The uint8 significand part of the encoded number.
     * @param exponent The uint8 exponent part of the encoded number, representing how many times the significand should be multiplied by 2.
     * @return The uint256 number approximating the original value before encoding.
     */
    function decode_uint8(uint8 significand, uint8 exponent) public pure returns (uint256) {
        return uint256(significand) << exponent;
    }

    /**
     * @notice Decodes a custom floating-point representation with a uint16 significand back into a uint256 number.
     * @dev Decodes the encoded number by shifting the significand left by the exponent, effectively multiplying it back.
     * @param significand The uint16 significand part of the encoded number.
     * @param exponent The uint8 exponent part of the encoded number, representing how many times the significand should be multiplied by 2.
     * @return The uint256 number approximating the original value before encoding.
     */
    function decode_uint16(uint16 significand, uint8 exponent) public pure returns (uint256) {
        return uint256(significand) << exponent;
    }

    /**
     * @notice Decodes a custom floating-point representation with a uint32 significand back into a uint256 number.
     * @dev Decodes the encoded number by shifting the significand left by the exponent, effectively multiplying it back.
     * @param significand The uint32 significand part of the encoded number.
     * @param exponent The uint8 exponent part of the encoded number, representing how many times the significand should be multiplied by 2.
     * @return The uint256 number approximating the original value before encoding.
     */
    function decode_uint32(uint32 significand, uint8 exponent) public pure returns (uint256) {
        return uint256(significand) << exponent;
    }

    /**
     * @notice Decodes a custom floating-point representation with a uint64 significand back into a uint256 number.
     * @dev Decodes the encoded number by shifting the significand left by the exponent, effectively multiplying it back.
     * @param significand The uint64 significand part of the encoded number.
     * @param exponent The uint8 exponent part of the encoded number, representing how many times the significand should be multiplied by 2.
     * @return The uint256 number approximating the original value before encoding.
     */
    function decode_uint64(uint64 significand, uint8 exponent) public pure returns (uint256) {
        return uint256(significand) << exponent;
    }
}
