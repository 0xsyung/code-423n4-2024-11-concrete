// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.24;

/// @title Errors
/// @author Leonhard Horstmeyer
/// @notice Provides functions related to policy calculations
library Errors {
    /// @notice Error message for the case when the number of claims is zero
    error ClaimsMustNotBeZero(uint8 number_of_claims);

    /// @notice Error message for the case when the number of claims exceeds the total claims
    error TooManyClaims(uint8 number_of_claims, uint8 total_claims);

    /// @notice Error message for the case when the quartic polynomial evaluates to a positive value
    error PositiveQuarticValue(int256 value);

    error CollateralValueBelowDebtValue();

    error RepaymentExceedsUserBorrowedAmount();

    error RepaymentExceedsConcreteBorrowedAmount();

    error WithdrawalExceedsUserSuppliedAmount();

    error WithdrawalExceedsConcreteSuppliedAmount();

    error ExceedsWadPrecision();

    // ==== Encoding Protection Data ==============

    error FractionExceedsUnityInMillionth();

    error FractionExceedsUnityInBP();

    error NumberOfProtectionClaimsTooHigh();

    error OpeningFeeExceedsPromisedAmount();
    error CancellationFeeExceedsPromisedAmount();
    error TrancheAmountExceedsPromisedAmount(uint8 trancheNumber);
    error TrancheFeeExceedsPromisedAmount(uint8 trancheNumber);
    error InvalidTrancheNumber(uint8 trancheNumber);
    error InvalidRightsEncoding(uint8 rights);
    error ExceedsUint96MaxPrecission();
    error InvalidProtectionEndTime();
    error TrancheAmountsDoNotSumToPromisedAmount();
    error AssetDivergence();
    error PriceFeedNotSupportedErrorOnExternalOracle(address asset);
    error InvalidMorphoRewardsReceiver();
    error InvalidAmountType(uint8 amountType);
    error AmountDiviatesTooMuch(uint256 providedAmount, uint256 actualAmount, uint256 wiggleFactor);
    error TransferFailed(address token, address recipient, uint256 amount);
}
