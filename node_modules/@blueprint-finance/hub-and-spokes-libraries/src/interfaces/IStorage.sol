// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.24;

interface IStorage {
    // ======== Get  ========

    function getAddress(bytes32 key_) external view returns (address);
    function getUint(bytes32 key_) external view returns (uint256);
    function getString(bytes32 key_) external view returns (string memory);
    function getBytes(bytes32 key_) external view returns (bytes memory);
    function getBool(bytes32 key_) external view returns (bool);
    function getInt(bytes32 key_) external view returns (int256);
    function getBytes32(bytes32 key_) external view returns (bytes32);

    // ======== Set  ========

    function setAddress(bytes32 key_, address value_) external;
    function setUint(bytes32 key_, uint256 value_) external;
    function setString(bytes32 key_, string calldata value_) external;
    function setBytes(bytes32 key_, bytes calldata value_) external;
    function setBool(bytes32 key_, bool value_) external;
    function setInt(bytes32 key_, int256 value_) external;
    function setBytes32(bytes32 key_, bytes32 value_) external;

    // ======== Delete  ========

    function deleteAddress(bytes32 key_) external;
    function deleteUint(bytes32 key_) external;
    function deleteString(bytes32 key_) external;
    function deleteBytes(bytes32 key_) external;
    function deleteBool(bytes32 key_) external;
    function deleteInt(bytes32 key_) external;
    function deleteBytes32(bytes32 key_) external;
}
