// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.24;

import {Test} from "forge-std/Test.sol";
import {console2 as console} from "forge-std/console2.sol";
import {PolicyInsightsLibV1} from "../src/libraries/PolicyInsightsLibV1.sol";
import {WAD} from "../src/utils/Constants.sol";

contract PolicyInsightsLibV1Test is Test {
    function test_getLowerBoundForMaxPromisedAmount() public pure {
        uint256 currentCollateralAmountInTokenAtLender = 1000000;
        uint256 totalClaimFeesAsFractionOfPromisedAmountInWad = WAD / 100;
        uint256 foreclosureLtvInWad = 80 * WAD / 100;
        uint256 foreclosureExecutionDelayMultiplicativeBufferInWad = WAD / 100;

        uint256 ltvRemainder =
            WAD - (foreclosureLtvInWad * (WAD + foreclosureExecutionDelayMultiplicativeBufferInWad)) / WAD;
        uint256 expected = (currentCollateralAmountInTokenAtLender * ltvRemainder)
            / (WAD - (ltvRemainder * (WAD - totalClaimFeesAsFractionOfPromisedAmountInWad)) / WAD);

        uint256 result = PolicyInsightsLibV1.getLowerBoundForMaxPromisedAmount(
            currentCollateralAmountInTokenAtLender,
            totalClaimFeesAsFractionOfPromisedAmountInWad,
            foreclosureLtvInWad,
            foreclosureExecutionDelayMultiplicativeBufferInWad
        );
        assertEq(
            result,
            expected,
            "getLowerBoundForMaxPromisedAmount should return the correct lower bound for the maximum promised amount"
        );
    }
}
