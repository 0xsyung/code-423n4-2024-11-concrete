// SPDX-License-Identifier: AGPL-3.0
pragma solidity 0.8.24;

import {Test} from "forge-std/Test.sol";
import {BlueprintHelperLib} from "../src/libraries/BlueprintHelperLib.sol";

contract BlueprintHelperLibTest is Test {
    function test_encodeRewardAndLastUpdate() public pure {
        uint256 amount = 123456789;
        uint256 timestamp = 1650000000; // Example timestamp

        // Encode the amount and timestamp
        uint256 encoded = BlueprintHelperLib.encodeRewardAndLastUpdate(amount, timestamp);

        // Decode to verify the encoding was correct
        uint256 decodedAmount = encoded >> 40;
        uint256 decodedTimestamp = uint256(uint40(encoded));

        assertEq(decodedAmount, amount, "Encoded amount should match the original amount");
        assertEq(decodedTimestamp, timestamp, "Encoded timestamp should match the original timestamp");
    }

    function test_decodeRewardAndLastUpdate_withinGracePeriod() public pure {
        uint256 amount = 500000;
        uint256 timestamp = 1650000000;
        uint256 gracePeriod = 3600; // 1 hour in seconds
        uint256 currentTime = timestamp + 1800; // Within the grace period (30 minutes later)

        // Encode the amount and timestamp
        uint256 encoded = BlueprintHelperLib.encodeRewardAndLastUpdate(amount, timestamp);

        // Decode
        uint256 decodedAmount = BlueprintHelperLib.decodeRewardAndLastUpdate(encoded, gracePeriod, currentTime);

        assertEq(decodedAmount, amount, "Decoded amount should match the original amount when within grace period");
    }

    function test_decodeRewardAndLastUpdate_outsideGracePeriod() public pure {
        uint256 amount = 500000;
        uint256 timestamp = 1650000000;
        uint256 gracePeriod = 3600; // 1 hour in seconds
        uint256 currentTime = timestamp + 7200; // Outside the grace period (2 hours later)

        // Encode the amount and timestamp
        uint256 encoded = BlueprintHelperLib.encodeRewardAndLastUpdate(amount, timestamp);

        // Decode
        uint256 decodedAmount = BlueprintHelperLib.decodeRewardAndLastUpdate(encoded, gracePeriod, currentTime);

        assertEq(decodedAmount, 0, "Decoded amount should be zero when outside grace period");
    }

    function test_encodeAndDecodeRewardAndLastUpdate() public pure {
        uint256 amount = 987654321;
        uint256 timestamp = 1700000000;
        uint256 gracePeriod = 86400; // 1 day in seconds
        uint256 currentTime = timestamp + 3600; // Within grace period (1 hour later)

        // Encode the amount and timestamp
        uint256 encoded = BlueprintHelperLib.encodeRewardAndLastUpdate(amount, timestamp);

        // Decode
        uint256 decodedAmount = BlueprintHelperLib.decodeRewardAndLastUpdate(encoded, gracePeriod, currentTime);

        assertEq(decodedAmount, amount, "Decoded amount should match the original amount");
    }
}
