// SPDX-License-Identifier: AGPL-3.0
pragma solidity 0.8.24;

import {Test} from "forge-std/Test.sol";
import {console2 as console} from "forge-std/console2.sol";
import {Math} from "@openzeppelin/contracts/utils/math/Math.sol";
import {OracleLibV1} from "../src/libraries/OracleLibV1.sol";

contract OracleLibV1Test is Test {
    function test_getDecimalsFromDenomination() public pure {
        uint256 denomination = 10 ** 18;
        uint8 expectedDecimals = 18;
        uint8 actualDecimals = OracleLibV1.getDecimalsFromDenomination(denomination);
        assertEq(actualDecimals, expectedDecimals, "getDecimalsFromDenomination should return the correct decimals");

        denomination = 10 ** 8;
        expectedDecimals = 8;
        actualDecimals = OracleLibV1.getDecimalsFromDenomination(denomination);
        assertEq(
            actualDecimals, expectedDecimals, "getDecimalsFromDenomination should return the correct decimals for 10^8"
        );
    }

    function test_convertStandardUnitsToSmallestUnitsPriceQuote() public pure {
        uint256 priceStandardUnits = 1234560000; // 1234.56 USDC with precisionStandardUnits of 10^6
        uint256 denominationA = 10 ** 18; // WETH in Wei
        uint256 denominationB = 10 ** 6; // USDC in micro USDC
        uint256 precisionStandardUnits = 10 ** 6; // Precision of 10^6
        uint256 precisionSmallestUnits = 10 ** 26; // Precision of 10^26

        uint256 expectedPriceSmallestUnits = 123456000000000000; // 0.00000000123456 micro USDC * 10^26
        uint256 actualPriceSmallestUnits = OracleLibV1.convertStandardUnitsToSmallestUnitsPriceQuote(
            priceStandardUnits, denominationA, denominationB, precisionStandardUnits, precisionSmallestUnits
        );

        assertEq(
            actualPriceSmallestUnits,
            expectedPriceSmallestUnits,
            "convertStandardUnitsToSmallestUnitsPriceQuote should return the correct price in smallest units"
        );
    }

    function test_convertSmallestUnitsToStandardUnitsPriceQuote() public pure {
        uint256 priceSmallestUnits = 123456000000000000; // 0.00000000123456 micro USDC * 10^26
        uint256 denominationA = 10 ** 18; // WETH in Wei
        uint256 denominationB = 10 ** 6; // USDC in micro USDC
        uint256 precisionStandardUnits = 10 ** 6; // Precision of 10^6
        uint256 precisionSmallestUnits = 10 ** 26; // Precision of 10^26

        uint256 expectedPriceStandardUnits = 1234560000; // 1234.56 USDC with precisionStandardUnits of 10^6
        uint256 actualPriceStandardUnits = OracleLibV1.convertSmallestUnitsToStandardUnitsPriceQuote(
            priceSmallestUnits, denominationA, denominationB, precisionStandardUnits, precisionSmallestUnits
        );

        assertEq(
            actualPriceStandardUnits,
            expectedPriceStandardUnits,
            "convertSmallestUnitsToStandardUnitsPriceQuote should return the correct price in standard units"
        );
    }

    function test_changeDenominationOfPrice() public pure {
        uint256 price = 123456000000; // Price of 1234.56 USDC with precision of 10^8
        uint256 oldDenomination = 10 ** 8; // Old denomination (precision of 10^8)
        uint256 newDenomination = 10 ** 18; // New denomination (precision of 10^18)

        uint256 expectedPriceNewDenomination = 1234560000000000000000; // Adjusted to new precision
        uint256 actualPriceNewDenomination =
            OracleLibV1.changeDenominationOfPrice(price, oldDenomination, newDenomination);

        assertEq(
            actualPriceNewDenomination,
            expectedPriceNewDenomination,
            "changeDenominationOfPrice should return the correct price in the new denomination"
        );
    }
}
